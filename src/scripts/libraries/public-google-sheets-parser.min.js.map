{"version":3,"sources":["jsdelivr-header.js","/npm/public-google-sheets-parser@1.2.6/dist/index.js"],"names":[],"mappings":"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","file":"/npm/public-google-sheets-parser@1.2.6/dist/index.js","sourceRoot":"","sourcesContent":["/**\n * Minified by jsDelivr using Terser v5.7.1.\n * Original file: /npm/public-google-sheets-parser@1.2.6/dist/index.js\n *\n * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files\n */\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nconst isBrowser = typeof require === 'undefined';\nconst fetch = isBrowser ?\n/* istanbul ignore next */\nwindow.fetch : require('../src/fetch');\n\nlet PublicGoogleSheetsParser = /*#__PURE__*/function () {\n  function PublicGoogleSheetsParser(spreadsheetId, sheetName) {\n    _classCallCheck(this, PublicGoogleSheetsParser);\n\n    this.id = spreadsheetId;\n    this.sheetName = sheetName;\n  }\n\n  _createClass(PublicGoogleSheetsParser, [{\n    key: \"getSpreadsheetDataUsingFetch\",\n    value: function getSpreadsheetDataUsingFetch() {\n      // Read data from the first sheet of the target document.\n      // It cannot be used unless everyone has been given read permission.\n      // It must be a spreadsheet document with a header, as in the example document below.\n      // spreadsheet document for example: https://docs.google.com/spreadsheets/d/10WDbAPAY7Xl5DT36VuMheTPTTpqx9x0C5sDCnh4BGps/edit#gid=1719755213\n      if (!this.id) return null;\n      let url = `https://docs.google.com/spreadsheets/d/${this.id}/gviz/tq?`;\n\n      if (this.sheetName) {\n        url = url.concat(`sheet=${this.sheetName}`);\n      }\n\n      return fetch(url).then(r => r && r.ok && r.text ? r.text() : null).catch(\n      /* istanbul ignore next */\n      _ => null);\n    }\n  }, {\n    key: \"normalizeRow\",\n    value: function normalizeRow(rows) {\n      return rows.map(row => row && row.v !== null && row.v !== undefined ? row : {});\n    }\n  }, {\n    key: \"applyHeaderIntoRows\",\n    value: function applyHeaderIntoRows(header, rows) {\n      return rows.map(({\n        c: row\n      }) => this.normalizeRow(row)).map(row => row.reduce((p, c, i) => c.v ? Object.assign(p, {\n        [header[i]]: c.v\n      }) : p, {}));\n    }\n  }, {\n    key: \"getItems\",\n    value: function getItems(spreadsheetResponse) {\n      let rows = [];\n\n      try {\n        const parsedJSON = JSON.parse(spreadsheetResponse.split('\\n')[1].replace(/google.visualization.Query.setResponse\\(|\\);/g, ''));\n        const hasSomeLabelPropertyInCols = parsedJSON.table.cols.some(({\n          label\n        }) => !!label);\n\n        if (hasSomeLabelPropertyInCols) {\n          const header = parsedJSON.table.cols.map(({\n            label\n          }) => label);\n          rows = this.applyHeaderIntoRows(header, parsedJSON.table.rows);\n        } else {\n          const [headerRow, ...originalRows] = parsedJSON.table.rows;\n          const header = this.normalizeRow(headerRow.c).map(row => row.v);\n          rows = this.applyHeaderIntoRows(header, originalRows);\n        }\n      } catch (e) {}\n\n      return rows;\n    }\n  }, {\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator(function* (spreadsheetId, sheetName) {\n        if (spreadsheetId) this.id = spreadsheetId;\n        if (sheetName) this.sheetName = sheetName;\n        if (!this.id) throw new Error('SpreadsheetId is required.');\n        const spreadsheetResponse = yield this.getSpreadsheetDataUsingFetch();\n        if (spreadsheetResponse === null) return [];\n        return this.getItems(spreadsheetResponse);\n      });\n\n      function parse(_x, _x2) {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }]);\n\n  return PublicGoogleSheetsParser;\n}();\n/* istanbul ignore next */\n\n\nif (isBrowser) {\n  window.PublicGoogleSheetsParser = PublicGoogleSheetsParser;\n} else {\n  module.exports = PublicGoogleSheetsParser;\n  module.exports.default = PublicGoogleSheetsParser;\n}\n"]}